{"version":3,"sources":["turbopack:///[project]/src/lib/trading/trade-detection.ts","turbopack:///[project]/node_modules/next/dist/esm/build/templates/app-route.js","turbopack:///[project]/src/app/api/cron/detect-trades/route.ts"],"sourcesContent":["/**\n * Trade Detection Service\n * Detects trades by comparing position snapshots\n * Converted from Python implementation\n */\n\nimport { createServiceRoleClient } from '@/lib/supabase/server';\nimport { snaptradeService } from '@/lib/snaptrade/client';\nimport type { Database } from '@/lib/supabase/types';\n\ntype User = Database['public']['Tables']['users']['Row'];\ntype BrokerageConnection = Database['public']['Tables']['brokerage_connections']['Row'];\ntype PositionSnapshot = Database['public']['Tables']['position_snapshots']['Row'];\n\ninterface NormalizedPositions {\n  [symbol: string]: number; // symbol -> quantity\n}\n\ninterface DetectedTrade {\n  symbol: string;\n  action: 'buy' | 'sell';\n  quantity: number;\n  isExit: boolean;\n}\n\nexport class TradeDetector {\n  /**\n   * Normalize positions from SnapTrade API response to { symbol: quantity } format\n   */\n  normalizePositions(positions: any[]): NormalizedPositions {\n    const normalized: NormalizedPositions = {};\n\n    for (const position of positions) {\n      const symbol = position.symbol?.symbol || position.symbol;\n      const quantity = position.units || position.quantity || 0;\n\n      if (symbol) {\n        normalized[symbol] = Number(quantity);\n      }\n    }\n\n    return normalized;\n  }\n\n  /**\n   * Get the last position snapshot for an account\n   */\n  async getLastSnapshot(userId: string, accountId: string): Promise<PositionSnapshot | null> {\n    const supabase = createServiceRoleClient();\n\n    const { data, error } = await supabase\n      .from('position_snapshots')\n      .select('*')\n      .eq('user_id', userId)\n      .eq('account_id', accountId)\n      .order('created_at', { ascending: false })\n      .limit(1)\n      .single();\n\n    if (error) {\n      // No previous snapshot is okay for first run\n      return null;\n    }\n\n    return data;\n  }\n\n  /**\n   * Save a new position snapshot\n   */\n  async saveSnapshot(userId: string, accountId: string, positions: NormalizedPositions): Promise<void> {\n    const supabase = createServiceRoleClient();\n\n    const { error } = await supabase.from('position_snapshots').insert({\n      user_id: userId,\n      account_id: accountId,\n      positions,\n    });\n\n    if (error) {\n      console.error('Error saving position snapshot:', error);\n    }\n  }\n\n  /**\n   * Detect trades by comparing current positions with last snapshot\n   */\n  detectTrades(\n    currentPositions: NormalizedPositions,\n    lastPositions: NormalizedPositions\n  ): DetectedTrade[] {\n    const trades: DetectedTrade[] = [];\n\n    // Get all unique symbols\n    const allSymbols = new Set([\n      ...Object.keys(currentPositions),\n      ...Object.keys(lastPositions),\n    ]);\n\n    for (const symbol of allSymbols) {\n      const currentQty = currentPositions[symbol] || 0;\n      const lastQty = lastPositions[symbol] || 0;\n\n      if (currentQty === lastQty) {\n        // No change\n        continue;\n      }\n\n      if (currentQty > lastQty) {\n        // Position increased = BUY\n        trades.push({\n          symbol,\n          action: 'buy',\n          quantity: currentQty - lastQty,\n          isExit: false,\n        });\n      } else if (currentQty < lastQty) {\n        // Position decreased = SELL\n        const isExit = currentQty === 0; // Completely closed position\n        trades.push({\n          symbol,\n          action: 'sell',\n          quantity: lastQty - currentQty,\n          isExit,\n        });\n      }\n    }\n\n    return trades;\n  }\n\n  /**\n   * Detect trades for a specific account\n   */\n  async detectTradesForAccount(user: User, account: BrokerageConnection): Promise<DetectedTrade[]> {\n    try {\n      // Fetch current positions from SnapTrade\n      const currentPositionsRaw = await snaptradeService.getAccountPositions(\n        user.snaptrade_user_id!,\n        user.snaptrade_user_secret!,\n        account.account_id\n      );\n\n      // Normalize positions\n      const currentPositions = this.normalizePositions(currentPositionsRaw);\n\n      // Get last snapshot\n      const lastSnapshot = await this.getLastSnapshot(user.id, account.account_id);\n      const lastPositions: NormalizedPositions = lastSnapshot?.positions || {};\n\n      // Detect trades\n      const trades = this.detectTrades(currentPositions, lastPositions);\n\n      // Save new snapshot\n      await this.saveSnapshot(user.id, account.account_id, currentPositions);\n\n      return trades;\n    } catch (error) {\n      console.error(`Error detecting trades for account ${account.account_id}:`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Create trade records in the database\n   */\n  async createTradeRecords(userId: string, accountId: string, trades: DetectedTrade[]): Promise<void> {\n    if (trades.length === 0) {\n      return;\n    }\n\n    const supabase = createServiceRoleClient();\n\n    const tradeRecords = trades.map((trade) => ({\n      leader_id: userId,\n      account_id: accountId,\n      symbol: trade.symbol,\n      action: trade.action,\n      quantity: trade.quantity,\n      processed: false,\n      is_exit: trade.isExit,\n      detected_at: new Date().toISOString(),\n    }));\n\n    const { error } = await supabase.from('leader_trades').insert(tradeRecords);\n\n    if (error) {\n      console.error('Error creating trade records:', error);\n    } else {\n      console.info(`Created ${trades.length} trade records for user ${userId}`);\n    }\n  }\n\n  /**\n   * Poll all active leaders for trades\n   */\n  async pollAllLeaders(): Promise<{ leadersPolled: number; tradesDetected: number }> {\n    const supabase = createServiceRoleClient();\n\n    // Get all users who are leaders\n    const { data: leaders, error } = await supabase\n      .from('users')\n      .select('*')\n      .in('role', ['leader', 'both'])\n      .not('snaptrade_user_id', 'is', null);\n\n    if (error || !leaders) {\n      console.error('Error fetching leaders:', error);\n      return { leadersPolled: 0, tradesDetected: 0 };\n    }\n\n    let totalTrades = 0;\n\n    for (const leader of leaders) {\n      // Get leader's brokerage connections\n      const { data: connections } = await supabase\n        .from('brokerage_connections')\n        .select('*')\n        .eq('user_id', leader.id)\n        .eq('status', 'active');\n\n      if (!connections || connections.length === 0) {\n        continue;\n      }\n\n      for (const connection of connections) {\n        const trades = await this.detectTradesForAccount(leader, connection);\n\n        if (trades.length > 0) {\n          await this.createTradeRecords(leader.id, connection.account_id, trades);\n          totalTrades += trades.length;\n\n          console.info(\n            `Detected ${trades.length} trades for leader ${leader.id} (${leader.full_name || 'Unknown'})`\n          );\n        }\n      }\n    }\n\n    return {\n      leadersPolled: leaders.length,\n      tradesDetected: totalTrades,\n    };\n  }\n}\n\n// Export singleton instance\nexport const tradeDetector = new TradeDetector();\nexport default tradeDetector;\n","import { AppRouteRouteModule } from \"next/dist/esm/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/esm/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/esm/server/lib/patch-fetch\";\nimport { getRequestMeta } from \"next/dist/esm/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/esm/server/lib/trace/tracer\";\nimport { normalizeAppPath } from \"next/dist/esm/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/esm/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/esm/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/esm/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/esm/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/esm/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/esm/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/esm/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/esm/lib/constants\";\nimport { NoFallbackError } from \"next/dist/esm/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/esm/server/response-cache\";\nimport * as userland from \"INNER_APP_ROUTE\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/cron/detect-trades/route\",\n        pathname: \"/api/cron/detect-trades\",\n        filename: \"route\",\n        bundlePath: \"\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"[project]/src/app/api/cron/detect-trades/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/cron/detect-trades/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!getRequestMeta(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!getRequestMeta(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n","/**\n * Cron Job: Detect Trades\n * Called by Vercel Cron every 30 seconds\n * Polls leader accounts for new trades\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { tradeDetector } from '@/lib/trading/trade-detection';\n\nexport const runtime = 'nodejs';\nexport const maxDuration = 60;\n\n/**\n * GET /api/cron/detect-trades\n * Vercel Cron calls this endpoint\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify request is from Vercel Cron\n    const authHeader = request.headers.get('authorization');\n    const cronSecret = process.env.CRON_SECRET || 'development';\n\n    // In production, verify the cron secret\n    if (process.env.NODE_ENV === 'production') {\n      if (!authHeader || authHeader !== `Bearer ${cronSecret}`) {\n        console.error('Unauthorized cron request');\n        return NextResponse.json(\n          { success: false, error: 'Unauthorized' },\n          { status: 401 }\n        );\n      }\n    }\n\n    console.log('[CRON] Starting trade detection...');\n\n    // Detect trades\n    const result = await tradeDetector.pollAllLeaders();\n\n    console.log('[CRON] Trade detection completed:', result);\n\n    return NextResponse.json({\n      success: true,\n      result,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    console.error('[CRON] Error detecting trades:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to detect trades',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[1]}