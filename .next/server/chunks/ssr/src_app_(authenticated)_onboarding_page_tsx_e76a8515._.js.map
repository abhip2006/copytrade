{"version":3,"sources":["turbopack:///[project]/src/app/(authenticated)/onboarding/page.tsx"],"sourcesContent":["/**\n * User Onboarding Page\n * Multi-step wizard for connecting brokerage account and setting up profile\n */\n\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useUser } from '@clerk/nextjs';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CheckCircle2, Loader2, AlertCircle, TrendingUp, Shield, Zap } from 'lucide-react';\n\ntype OnboardingStep = 'welcome' | 'register' | 'connect' | 'select-account' | 'role-selection' | 'complete';\n\ninterface BrokerageAccount {\n  id: string;\n  name: string;\n  number: string;\n  type: string;\n  balance?: {\n    total?: { amount?: number; currency?: string };\n  };\n  meta?: {\n    institution_name?: string;\n  };\n}\n\ninterface BrokerageAuthorization {\n  id: string;\n  brokerage_name?: string;\n  type?: string;\n}\n\nexport default function OnboardingPage() {\n  const router = useRouter();\n  const { user } = useUser();\n  const [currentStep, setCurrentStep] = useState<OnboardingStep>('welcome');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [snaptradeUserId, setSnaptradeUserId] = useState<string | null>(null);\n  const [connectionUrl, setConnectionUrl] = useState<string | null>(null);\n  const [accounts, setAccounts] = useState<BrokerageAccount[]>([]);\n  const [authorizations, setAuthorizations] = useState<BrokerageAuthorization[]>([]);\n  const [selectedAccount, setSelectedAccount] = useState<string | null>(null);\n  const [selectedRole, setSelectedRole] = useState<'leader' | 'follower' | null>(null);\n\n  // Auto-advance from welcome after 2 seconds\n  useEffect(() => {\n    if (currentStep === 'welcome') {\n      const timer = setTimeout(() => {\n        handleRegisterSnapTrade();\n      }, 2000);\n      return () => clearTimeout(timer);\n    }\n  }, [currentStep]);\n\n  // Poll for accounts after connection\n  useEffect(() => {\n    if (currentStep === 'connect' && connectionUrl) {\n      // Poll every 3 seconds to check if user completed connection\n      const interval = setInterval(() => {\n        checkForAccounts();\n      }, 3000);\n      return () => clearInterval(interval);\n    }\n  }, [currentStep, connectionUrl]);\n\n  /**\n   * Step 1: Register user with SnapTrade\n   */\n  const handleRegisterSnapTrade = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/snaptrade/register', {\n        method: 'POST',\n      });\n\n      const result = await response.json();\n\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to register with SnapTrade');\n      }\n\n      setSnaptradeUserId(result.data.userId);\n      setCurrentStep('register');\n\n      // Auto-advance to connection step\n      setTimeout(() => {\n        handleGenerateConnectionUrl();\n      }, 1500);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Registration failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Step 2: Generate SnapTrade connection URL\n   */\n  const handleGenerateConnectionUrl = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/snaptrade/connect', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          immediateRedirect: true,\n          connectionType: 'trade',\n        }),\n      });\n\n      const result = await response.json();\n\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to generate connection URL');\n      }\n\n      setConnectionUrl(result.data.redirectUri);\n      setCurrentStep('connect');\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Connection failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Skip brokerage connection - go straight to role selection\n   * Note: Users can connect later, but trading features will be limited\n   */\n  const handleSkipConnection = () => {\n    // Clear any account/authorization state since user is skipping\n    setAccounts([]);\n    setAuthorizations([]);\n    setSelectedAccount(null);\n    setCurrentStep('role-selection');\n  };\n\n  /**\n   * Open SnapTrade connection portal in new window\n   */\n  const handleOpenConnectionPortal = () => {\n    if (!connectionUrl) return;\n\n    // Open in new window (800x600)\n    const width = 800;\n    const height = 600;\n    const left = window.screen.width / 2 - width / 2;\n    const top = window.screen.height / 2 - height / 2;\n\n    window.open(\n      connectionUrl,\n      'SnapTrade Connection',\n      `width=${width},height=${height},left=${left},top=${top}`\n    );\n  };\n\n  /**\n   * Check if user has connected accounts\n   */\n  const checkForAccounts = async () => {\n    try {\n      const response = await fetch('/api/snaptrade/accounts');\n      const result = await response.json();\n\n      if (result.success && result.data.hasConnectedAccounts) {\n        setAccounts(result.data.accounts);\n        setAuthorizations(result.data.authorizations || []);\n        setCurrentStep('select-account');\n      }\n    } catch (err) {\n      console.error('Error checking accounts:', err);\n    }\n  };\n\n  /**\n   * Step 3: Select primary trading account\n   */\n  const handleSelectAccount = async () => {\n    if (!selectedAccount) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const account = accounts.find((a) => a.id === selectedAccount);\n      if (!account) throw new Error('Account not found');\n\n      // Find the authorization ID for this account\n      // Note: SnapTrade returns authorizations separately from accounts\n      // We'll use the first available authorization ID if we have authorizations\n      const authorizationId = authorizations.length > 0 ? authorizations[0].id : account.id;\n\n      const response = await fetch('/api/snaptrade/accounts', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          accountId: account.id,\n          authorizationId: authorizationId,\n        }),\n      });\n\n      const result = await response.json();\n\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to select account');\n      }\n\n      setCurrentStep('role-selection');\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Account selection failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Step 4: Select role (Leader or Follower)\n   */\n  const handleRoleSelection = async () => {\n    if (!selectedRole) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Update user role in database\n      const response = await fetch('/api/user/role', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ role: selectedRole }),\n      });\n\n      const result = await response.json();\n\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to set role');\n      }\n\n      setCurrentStep('complete');\n\n      // Redirect to appropriate dashboard after 2 seconds\n      setTimeout(() => {\n        if (selectedRole === 'leader') {\n          router.push('/leader');\n        } else {\n          router.push('/dashboard');\n        }\n      }, 2000);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Role selection failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Render step content\n   */\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 'welcome':\n        return (\n          <div className=\"text-center space-y-6\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-[var(--primary)] bg-opacity-10\">\n              <TrendingUp className=\"w-8 h-8 text-[var(--primary)]\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold mb-2\">Welcome to TradeOS!</h2>\n              <p className=\"text-[var(--foreground-muted)]\">\n                Let&apos;s get you set up in just a few steps\n              </p>\n            </div>\n            <div className=\"flex items-center justify-center\">\n              <Loader2 className=\"w-6 h-6 animate-spin text-[var(--primary)]\" />\n            </div>\n          </div>\n        );\n\n      case 'register':\n        return (\n          <div className=\"text-center space-y-6\">\n            <CheckCircle2 className=\"w-16 h-16 mx-auto text-[var(--success)]\" />\n            <div>\n              <h2 className=\"text-2xl font-bold mb-2\">Account Created!</h2>\n              <p className=\"text-[var(--foreground-muted)]\">\n                Preparing your brokerage connection...\n              </p>\n            </div>\n            <Loader2 className=\"w-6 h-6 mx-auto animate-spin text-[var(--primary)]\" />\n          </div>\n        );\n\n      case 'connect':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <Shield className=\"w-16 h-16 mx-auto mb-4 text-[var(--primary)]\" />\n              <h2 className=\"text-2xl font-bold mb-2\">Connect Your Brokerage</h2>\n              <p className=\"text-[var(--foreground-muted)] mb-6\">\n                Securely link your brokerage account to start trading\n              </p>\n            </div>\n\n            <Card className=\"border-2 border-dashed\">\n              <CardContent className=\"pt-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <CheckCircle2 className=\"w-5 h-5 text-[var(--success)] mt-0.5\" />\n                    <div>\n                      <p className=\"font-medium\">Bank-level encryption</p>\n                      <p className=\"text-sm text-[var(--foreground-muted)]\">\n                        Your credentials are never stored on our servers\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <CheckCircle2 className=\"w-5 h-5 text-[var(--success)] mt-0.5\" />\n                    <div>\n                      <p className=\"font-medium\">Read-only access option</p>\n                      <p className=\"text-sm text-[var(--foreground-muted)]\">\n                        Choose between read-only or full trading permissions\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <CheckCircle2 className=\"w-5 h-5 text-[var(--success)] mt-0.5\" />\n                    <div>\n                      <p className=\"font-medium\">Revoke anytime</p>\n                      <p className=\"text-sm text-[var(--foreground-muted)]\">\n                        Disconnect your account at any time from settings\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <div className=\"space-y-3\">\n              <Button\n                onClick={handleOpenConnectionPortal}\n                disabled={!connectionUrl}\n                className=\"w-full\"\n                size=\"lg\"\n              >\n                {connectionUrl ? 'Connect Brokerage Account' : 'Generating Connection...'}\n              </Button>\n\n              <Button\n                onClick={handleSkipConnection}\n                variant=\"outline\"\n                className=\"w-full\"\n                size=\"lg\"\n              >\n                Skip for now - I'll connect later\n              </Button>\n            </div>\n\n            {connectionUrl && (\n              <p className=\"text-xs text-center text-[var(--foreground-muted)]\">\n                A new window will open. Return here after connecting your account.\n              </p>\n            )}\n\n            <div className=\"flex items-start gap-2 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n              <AlertCircle className=\"w-4 h-4 text-yellow-600 dark:text-yellow-400 mt-0.5 flex-shrink-0\" />\n              <p className=\"text-xs text-yellow-800 dark:text-yellow-200\">\n                <strong>Note:</strong> Trading features require a connected brokerage account.\n                You can connect one later from your dashboard settings.\n              </p>\n            </div>\n          </div>\n        );\n\n      case 'select-account':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <CheckCircle2 className=\"w-16 h-16 mx-auto mb-4 text-green-500\" />\n              <h2 className=\"text-2xl font-bold mb-2\">Accounts Connected!</h2>\n              <p className=\"text-[var(--foreground-muted)]\">\n                Select your primary trading account\n              </p>\n            </div>\n\n            <div className=\"space-y-3\">\n              {accounts.map((account) => (\n                <Card\n                  key={account.id}\n                  className={`cursor-pointer transition-all ${\n                    selectedAccount === account.id\n                      ? 'border-[var(--primary)] border-2 bg-[var(--primary)] bg-opacity-5'\n                      : 'hover:border-[var(--primary)] hover:border-opacity-50'\n                  }`}\n                  onClick={() => setSelectedAccount(account.id)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">\n                          {account.meta?.institution_name || account.name}\n                        </p>\n                        <p className=\"text-sm text-[var(--foreground-muted)]\">\n                          {account.type} •••{account.number?.slice(-4)}\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-bold\">\n                          ${account.balance?.total?.amount?.toLocaleString() || '0.00'}\n                        </p>\n                        <p className=\"text-xs text-[var(--foreground-muted)]\">\n                          {account.balance?.total?.currency || 'USD'}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            <Button\n              onClick={handleSelectAccount}\n              disabled={!selectedAccount || loading}\n              className=\"w-full\"\n              size=\"lg\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Saving...\n                </>\n              ) : (\n                'Continue'\n              )}\n            </Button>\n          </div>\n        );\n\n      case 'role-selection':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <Zap className=\"w-16 h-16 mx-auto mb-4 text-[var(--primary)]\" />\n              <h2 className=\"text-2xl font-bold mb-2\">Choose Your Path</h2>\n              <p className=\"text-[var(--foreground-muted)]\">\n                How do you want to use TradeOS?\n              </p>\n            </div>\n\n            {accounts.length === 0 && (\n              <div className=\"flex items-start gap-2 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\">\n                <AlertCircle className=\"w-4 h-4 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0\" />\n                <p className=\"text-xs text-blue-800 dark:text-blue-200\">\n                  You haven't connected a brokerage account yet. You can still select your role\n                  and connect an account later from your settings to enable trading features.\n                </p>\n              </div>\n            )}\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Card\n                className={`cursor-pointer transition-all ${\n                  selectedRole === 'leader'\n                    ? 'border-[var(--primary)] border-2 bg-[var(--primary)] bg-opacity-5'\n                    : 'hover:border-[var(--primary)] hover:border-opacity-50'\n                }`}\n                onClick={() => setSelectedRole('leader')}\n              >\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"w-5 h-5\" />\n                    Leader\n                  </CardTitle>\n                  <CardDescription>Share your trades with followers</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-sm\">\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-[var(--success)] mt-0.5\" />\n                      <span>Trade freely and earn from followers</span>\n                    </li>\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-[var(--success)] mt-0.5\" />\n                      <span>Build your trading reputation</span>\n                    </li>\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-[var(--success)] mt-0.5\" />\n                      <span>Access advanced analytics</span>\n                    </li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card\n                className={`cursor-pointer transition-all ${\n                  selectedRole === 'follower'\n                    ? 'border-[var(--primary)] border-2 bg-[var(--primary)] bg-opacity-5'\n                    : 'hover:border-[var(--primary)] hover:border-opacity-50'\n                }`}\n                onClick={() => setSelectedRole('follower')}\n              >\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Shield className=\"w-5 h-5\" />\n                    Follower\n                  </CardTitle>\n                  <CardDescription>Copy successful traders automatically</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-sm\">\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-[var(--success)] mt-0.5\" />\n                      <span>Automated trade copying</span>\n                    </li>\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-[var(--success)] mt-0.5\" />\n                      <span>Risk management controls</span>\n                    </li>\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-[var(--success)] mt-0.5\" />\n                      <span>Follow multiple leaders</span>\n                    </li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Button\n              onClick={handleRoleSelection}\n              disabled={!selectedRole || loading}\n              className=\"w-full\"\n              size=\"lg\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Setting up...\n                </>\n              ) : (\n                'Complete Setup'\n              )}\n            </Button>\n          </div>\n        );\n\n      case 'complete':\n        return (\n          <div className=\"text-center space-y-6\">\n            <CheckCircle2 className=\"w-20 h-20 mx-auto text-[var(--success)]\" />\n            <div>\n              <h2 className=\"text-3xl font-bold mb-2\">All Set!</h2>\n              <p className=\"text-[var(--foreground-muted)]\">\n                Redirecting you to your dashboard...\n              </p>\n            </div>\n            <Loader2 className=\"w-6 h-6 mx-auto animate-spin text-[var(--primary)]\" />\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[var(--background)] flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-2xl\">\n        <Card className=\"border-2\">\n          <CardContent className=\"p-8\">\n            {error && (\n              <div className=\"mb-6 p-4 bg-[var(--danger-bg)] border border-[var(--danger)] rounded-lg flex items-start gap-3\">\n                <AlertCircle className=\"w-5 h-5 text-[var(--danger)] mt-0.5\" />\n                <div>\n                  <p className=\"font-medium text-[var(--foreground)]\">Error</p>\n                  <p className=\"text-sm text-[var(--foreground-secondary)]\">{error}</p>\n                </div>\n              </div>\n            )}\n\n            {renderStepContent()}\n\n            {/* Progress indicator */}\n            <div className=\"mt-8 flex items-center justify-center gap-2\">\n              {['welcome', 'register', 'connect', 'select-account', 'role-selection', 'complete'].map(\n                (step, index) => (\n                  <div\n                    key={step}\n                    className={`h-2 rounded-full transition-all ${\n                      step === currentStep\n                        ? 'w-8 bg-[var(--primary)]'\n                        : index <\n                          ['welcome', 'register', 'connect', 'select-account', 'role-selection', 'complete'].indexOf(\n                            currentStep\n                          )\n                        ? 'w-2 bg-[var(--primary)]'\n                        : 'w-2 bg-[var(--border)]'\n                    }`}\n                  />\n                )\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}