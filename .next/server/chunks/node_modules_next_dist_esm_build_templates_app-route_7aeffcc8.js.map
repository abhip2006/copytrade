{"version":3,"sources":["turbopack:///[project]/src/app/api/webhooks/snaptrade/route.ts","turbopack:///[project]/node_modules/next/dist/esm/build/templates/app-route.js","turbopack:///[project]/src/lib/snaptrade/webhooks.ts"],"sourcesContent":["/**\n * SnapTrade Webhook Handler\n * Receives and processes real-time trade and account events from SnapTrade\n *\n * Webhook events:\n * - TRADES_PLACED: Trade executed (primary - near real-time)\n * - ACCOUNT_HOLDINGS_UPDATED: Holdings changed\n *\n * Configure your webhook URL in SnapTrade Dashboard:\n * POST {YOUR_DOMAIN}/api/webhooks/snaptrade\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport {\n  SnapTradeEventType,\n  SnapTradeWebhookPayload,\n  WebhookTradeData,\n  verifySnapTradeWebhook,\n  processTradesPlacedEvent,\n  processAccountHoldingsUpdatedEvent,\n} from '@/lib/snaptrade/webhooks';\n\nexport const runtime = 'nodejs';\nexport const maxDuration = 60;\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Get webhook secret from environment\n    const webhookSecret = process.env.SNAPTRADE_WEBHOOK_SECRET;\n\n    if (!webhookSecret) {\n      console.error('[WEBHOOK] SNAPTRADE_WEBHOOK_SECRET is not configured');\n      return NextResponse.json(\n        { success: false, error: 'Webhook secret not configured' },\n        { status: 500 }\n      );\n    }\n\n    // Get request body\n    const body = await request.text();\n\n    // Verify webhook signature\n    if (!verifySnapTradeWebhook(body, webhookSecret)) {\n      console.error('[WEBHOOK] Invalid webhook signature or secret');\n      return NextResponse.json(\n        { success: false, error: 'Invalid webhook signature' },\n        { status: 401 }\n      );\n    }\n\n    // Parse the payload\n    let payload: SnapTradeWebhookPayload;\n    try {\n      payload = JSON.parse(body) as SnapTradeWebhookPayload;\n    } catch (error) {\n      console.error('[WEBHOOK] Failed to parse webhook payload:', error);\n      return NextResponse.json(\n        { success: false, error: 'Invalid JSON payload' },\n        { status: 400 }\n      );\n    }\n\n    console.log(`[WEBHOOK] Received ${payload.eventType} event`, {\n      webhookId: payload.webhookId,\n      userId: payload.userId,\n      timestamp: payload.eventTimestamp,\n    });\n\n    // Route to appropriate handler based on event type\n    switch (payload.eventType) {\n      case SnapTradeEventType.TRADES_PLACED:\n        return await handleTradesPlaced(payload);\n\n      case SnapTradeEventType.ACCOUNT_HOLDINGS_UPDATED:\n        return await handleAccountHoldingsUpdated(payload);\n\n      case SnapTradeEventType.CONNECTION_ADDED:\n        return await handleConnectionAdded(payload);\n\n      case SnapTradeEventType.CONNECTION_DELETED:\n        return await handleConnectionDeleted(payload);\n\n      case SnapTradeEventType.CONNECTION_FAILED:\n        return await handleConnectionFailed(payload);\n\n      // Other events are logged but not actively processed\n      default:\n        console.log(`[WEBHOOK] Event type '${payload.eventType}' received but not processed`);\n        return NextResponse.json({\n          success: true,\n          message: 'Event received and acknowledged',\n          eventType: payload.eventType,\n        });\n    }\n  } catch (error) {\n    console.error('[WEBHOOK] Unexpected error in webhook handler:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Handle TRADES_PLACED event\n * This is the primary event for real-time trade detection\n */\nasync function handleTradesPlaced(payload: SnapTradeWebhookPayload) {\n  try {\n    console.log('[WEBHOOK] Processing TRADES_PLACED event');\n\n    // Extract trade data from webhook details\n    // The structure may vary, but typically includes trades array or individual trade fields\n    let trades: WebhookTradeData[] = [];\n\n    if (payload.details) {\n      // If trades is an array\n      if (Array.isArray(payload.details.trades)) {\n        trades = payload.details.trades as WebhookTradeData[];\n      }\n      // If it's a single trade\n      else if (payload.details.symbol && payload.details.action) {\n        trades = [\n          {\n            symbol: payload.details.symbol,\n            action: payload.details.action.toUpperCase() as 'BUY' | 'SELL',\n            quantity: payload.details.quantity || 1,\n            price: payload.details.price,\n            orderType: payload.details.orderType,\n            assetType: payload.details.assetType,\n            orderId: payload.details.orderId,\n            timestamp: payload.details.timestamp,\n          } as WebhookTradeData,\n        ];\n      }\n    }\n\n    if (trades.length === 0) {\n      console.warn('[WEBHOOK] No trades found in TRADES_PLACED event details');\n      return NextResponse.json({\n        success: true,\n        message: 'No trades to process',\n        eventType: SnapTradeEventType.TRADES_PLACED,\n      });\n    }\n\n    console.log(`[WEBHOOK] Processing ${trades.length} trades from TRADES_PLACED event`);\n\n    // Process trades and feed them into the copy engine\n    const result = await processTradesPlacedEvent(payload, trades);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Trades processed successfully',\n      eventType: SnapTradeEventType.TRADES_PLACED,\n      result,\n    });\n  } catch (error) {\n    console.error('[WEBHOOK] Error handling TRADES_PLACED event:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to process trades',\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Handle ACCOUNT_HOLDINGS_UPDATED event\n * Used for supplementary/fallback detection\n */\nasync function handleAccountHoldingsUpdated(payload: SnapTradeWebhookPayload) {\n  try {\n    console.log('[WEBHOOK] Processing ACCOUNT_HOLDINGS_UPDATED event');\n\n    await processAccountHoldingsUpdatedEvent(payload);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Holdings update processed',\n      eventType: SnapTradeEventType.ACCOUNT_HOLDINGS_UPDATED,\n    });\n  } catch (error) {\n    console.error('[WEBHOOK] Error handling ACCOUNT_HOLDINGS_UPDATED event:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to process holdings update',\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Handle CONNECTION_ADDED event\n * Log when a brokerage connection is established\n */\nasync function handleConnectionAdded(payload: SnapTradeWebhookPayload) {\n  try {\n    console.log('[WEBHOOK] Brokerage connection added for user:', payload.userId, {\n      details: payload.details,\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: 'Connection logged',\n      eventType: SnapTradeEventType.CONNECTION_ADDED,\n    });\n  } catch (error) {\n    console.error('[WEBHOOK] Error handling CONNECTION_ADDED event:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to handle connection event',\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Handle CONNECTION_DELETED event\n * Log when a brokerage connection is removed\n */\nasync function handleConnectionDeleted(payload: SnapTradeWebhookPayload) {\n  try {\n    console.log('[WEBHOOK] Brokerage connection deleted for user:', payload.userId, {\n      details: payload.details,\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: 'Disconnection logged',\n      eventType: SnapTradeEventType.CONNECTION_DELETED,\n    });\n  } catch (error) {\n    console.error('[WEBHOOK] Error handling CONNECTION_DELETED event:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to handle disconnection event',\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Handle CONNECTION_FAILED event\n * Alert when connection has issues\n */\nasync function handleConnectionFailed(payload: SnapTradeWebhookPayload) {\n  try {\n    console.warn('[WEBHOOK] Brokerage connection failed for user:', payload.userId, {\n      details: payload.details,\n    });\n\n    // Could trigger notification to user here\n    // For now, just log it\n\n    return NextResponse.json({\n      success: true,\n      message: 'Connection failure logged',\n      eventType: SnapTradeEventType.CONNECTION_FAILED,\n    });\n  } catch (error) {\n    console.error('[WEBHOOK] Error handling CONNECTION_FAILED event:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to handle connection failure',\n      },\n      { status: 500 }\n    );\n  }\n}\n","import { AppRouteRouteModule } from \"next/dist/esm/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/esm/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/esm/server/lib/patch-fetch\";\nimport { getRequestMeta } from \"next/dist/esm/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/esm/server/lib/trace/tracer\";\nimport { normalizeAppPath } from \"next/dist/esm/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/esm/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/esm/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/esm/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/esm/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/esm/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/esm/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/esm/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/esm/lib/constants\";\nimport { NoFallbackError } from \"next/dist/esm/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/esm/server/response-cache\";\nimport * as userland from \"INNER_APP_ROUTE\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/webhooks/snaptrade/route\",\n        pathname: \"/api/webhooks/snaptrade\",\n        filename: \"route\",\n        bundlePath: \"\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"[project]/src/app/api/webhooks/snaptrade/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/webhooks/snaptrade/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!getRequestMeta(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!getRequestMeta(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n","/**\n * SnapTrade Webhook Service\n * Handles verification and processing of SnapTrade webhook events\n */\n\nimport crypto from 'crypto';\nimport { createServiceRoleClient } from '@/lib/supabase/server';\nimport type { Database } from '@/lib/supabase/types';\n\ntype LeaderTradesInsert = Database['public']['Tables']['leader_trades']['Insert'];\n\n/**\n * SnapTrade webhook event types\n */\nexport enum SnapTradeEventType {\n  USER_REGISTERED = 'USER_REGISTERED',\n  USER_DELETED = 'USER_DELETED',\n  CONNECTION_ATTEMPTED = 'CONNECTION_ATTEMPTED',\n  CONNECTION_ADDED = 'CONNECTION_ADDED',\n  CONNECTION_DELETED = 'CONNECTION_DELETED',\n  CONNECTION_BROKEN = 'CONNECTION_BROKEN',\n  CONNECTION_FIXED = 'CONNECTION_FIXED',\n  CONNECTION_UPDATED = 'CONNECTION_UPDATED',\n  CONNECTION_FAILED = 'CONNECTION_FAILED',\n  NEW_ACCOUNT_AVAILABLE = 'NEW_ACCOUNT_AVAILABLE',\n  ACCOUNT_REMOVED = 'ACCOUNT_REMOVED',\n  ACCOUNT_TRANSACTIONS_INITIAL_UPDATE = 'ACCOUNT_TRANSACTIONS_INITIAL_UPDATE',\n  ACCOUNT_TRANSACTIONS_UPDATED = 'ACCOUNT_TRANSACTIONS_UPDATED',\n  ACCOUNT_HOLDINGS_UPDATED = 'ACCOUNT_HOLDINGS_UPDATED',\n  TRADES_PLACED = 'TRADES_PLACED',\n}\n\n/**\n * SnapTrade webhook payload structure\n */\nexport interface SnapTradeWebhookPayload {\n  webhookId: string;\n  clientId: string;\n  userId: string;\n  eventType: SnapTradeEventType;\n  eventTimestamp: string;\n  webhookSecret: string;\n  details?: Record<string, any>;\n}\n\n/**\n * Trade data from TRADES_PLACED webhook\n */\nexport interface WebhookTradeData {\n  symbol: string;\n  action: 'BUY' | 'SELL';\n  quantity: number;\n  price?: number;\n  orderType?: string;\n  assetType?: 'stock' | 'option' | 'etf' | 'crypto';\n  optionType?: 'call' | 'put' | null;\n  strikePrice?: number | null;\n  expirationDate?: string | null;\n  contracts?: number | null;\n  orderId?: string;\n  timestamp?: string;\n}\n\n/**\n * Verify SnapTrade webhook signature\n * @param payload - The raw webhook payload as string\n * @param webhookSecret - The webhook secret from SnapTrade Dashboard\n * @param headers - Request headers from webhook\n * @returns true if webhook is authentic\n */\nexport function verifySnapTradeWebhook(\n  payload: string,\n  webhookSecret: string,\n  headers?: Record<string, string>\n): boolean {\n  try {\n    // SnapTrade uses webhookSecret field in the payload itself for verification\n    // Additional verification can be implemented if SnapTrade provides signature headers\n    const jsonPayload = JSON.parse(payload);\n    const providedSecret = jsonPayload.webhookSecret;\n\n    // Verify the webhook secret matches\n    if (providedSecret !== webhookSecret) {\n      console.error('[WEBHOOK] Invalid webhook secret');\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    console.error('[WEBHOOK] Error verifying webhook:', error);\n    return false;\n  }\n}\n\n/**\n * Check if a trade already exists (deduplication)\n * Prevents duplicate trade records from being created\n */\nexport async function checkTradeExists(\n  leaderId: string,\n  symbol: string,\n  action: string,\n  quantity: number,\n  detectedAt: string,\n  windowMinutes: number = 5\n): Promise<boolean> {\n  try {\n    const supabase = createServiceRoleClient();\n\n    // Look for trades detected in the last N minutes\n    const cutoffTime = new Date(new Date(detectedAt).getTime() - windowMinutes * 60000).toISOString();\n\n    const { data, error } = await supabase\n      .from('leader_trades')\n      .select('id')\n      .eq('leader_id', leaderId)\n      .eq('symbol', symbol)\n      .eq('action', action.toLowerCase())\n      .eq('quantity', quantity)\n      .gte('detected_at', cutoffTime)\n      .lte('detected_at', detectedAt)\n      .limit(1);\n\n    if (error) {\n      console.error('[WEBHOOK] Error checking for duplicate trades:', error);\n      return false;\n    }\n\n    return data && data.length > 0;\n  } catch (error) {\n    console.error('[WEBHOOK] Error in checkTradeExists:', error);\n    return false;\n  }\n}\n\n/**\n * Create a leader trade record from webhook data\n * This feeds trades into the copy engine for processing\n */\nexport async function createTradeFromWebhook(\n  leaderId: string,\n  accountId: string,\n  tradeData: WebhookTradeData\n): Promise<string | null> {\n  try {\n    const supabase = createServiceRoleClient();\n    const now = new Date().toISOString();\n\n    // Check for duplicates\n    const isDuplicate = await checkTradeExists(\n      leaderId,\n      tradeData.symbol,\n      tradeData.action,\n      tradeData.quantity,\n      now,\n      5 // 5 minute window\n    );\n\n    if (isDuplicate) {\n      console.log(\n        `[WEBHOOK] Duplicate trade detected for ${leaderId} - ${tradeData.symbol} ${tradeData.action} ${tradeData.quantity}`\n      );\n      return null;\n    }\n\n    // Prepare trade record\n    const tradeRecord: LeaderTradesInsert = {\n      leader_id: leaderId,\n      account_id: accountId,\n      symbol: tradeData.symbol,\n      action: (tradeData.action.toLowerCase() as 'buy' | 'sell'),\n      quantity: tradeData.quantity,\n      price: tradeData.price || null,\n      order_type: tradeData.orderType || 'market',\n      asset_type: (tradeData.assetType || 'stock') as 'stock' | 'option' | 'etf' | 'crypto',\n      option_type: tradeData.optionType || null,\n      strike_price: tradeData.strikePrice || null,\n      expiration_date: tradeData.expirationDate || null,\n      contracts: tradeData.contracts || null,\n      order_id: tradeData.orderId || null,\n      processed: false, // Will be processed by the copy engine\n      is_exit: false, // Webhook doesn't indicate if it's an exit, copy engine will determine\n      detected_at: now,\n    };\n\n    // Insert the trade record\n    const { data, error } = await supabase\n      .from('leader_trades')\n      .insert(tradeRecord)\n      .select('id')\n      .single();\n\n    if (error) {\n      console.error('[WEBHOOK] Error creating trade record:', error);\n      return null;\n    }\n\n    console.log(\n      `[WEBHOOK] Trade created successfully: ${leaderId} - ${tradeData.symbol} ${tradeData.action} ${tradeData.quantity}`,\n      { tradeId: data?.id }\n    );\n\n    return data?.id || null;\n  } catch (error) {\n    console.error('[WEBHOOK] Error in createTradeFromWebhook:', error);\n    return null;\n  }\n}\n\n/**\n * Get leader info by SnapTrade user ID\n * Maps SnapTrade userId to our database leader_id\n */\nexport async function getLeaderBySnapTradeUserId(\n  snapTradeUserId: string\n): Promise<{ id: string; full_name: string | null } | null> {\n  try {\n    const supabase = createServiceRoleClient();\n\n    const { data, error } = await supabase\n      .from('users')\n      .select('id, full_name')\n      .eq('snaptrade_user_id', snapTradeUserId)\n      .eq('role', 'leader')\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        // No rows found - this is okay, user might not be a leader\n        console.log(`[WEBHOOK] No leader found for SnapTrade user ${snapTradeUserId}`);\n        return null;\n      }\n      console.error('[WEBHOOK] Error fetching leader:', error);\n      return null;\n    }\n\n    return data;\n  } catch (error) {\n    console.error('[WEBHOOK] Error in getLeaderBySnapTradeUserId:', error);\n    return null;\n  }\n}\n\n/**\n * Get brokerage account by account ID\n */\nexport async function getAccountBySnaptTradeId(\n  accountId: string\n): Promise<{ id: string; user_id: string } | null> {\n  try {\n    const supabase = createServiceRoleClient();\n\n    const { data, error } = await supabase\n      .from('brokerage_connections')\n      .select('id, user_id')\n      .eq('account_id', accountId)\n      .single();\n\n    if (error) {\n      console.log(`[WEBHOOK] Account not found: ${accountId}`);\n      return null;\n    }\n\n    return data;\n  } catch (error) {\n    console.error('[WEBHOOK] Error in getAccountBySnaptTradeId:', error);\n    return null;\n  }\n}\n\n/**\n * Process TRADES_PLACED webhook event\n * This is the main entry point for trade processing\n */\nexport async function processTradesPlacedEvent(\n  webhookPayload: SnapTradeWebhookPayload,\n  tradesData: WebhookTradeData[]\n): Promise<{\n  processed: number;\n  skipped: number;\n  errors: number;\n}> {\n  const result = { processed: 0, skipped: 0, errors: 0 };\n\n  try {\n    const snapTradeUserId = webhookPayload.userId;\n\n    // Get the leader from our database\n    const leader = await getLeaderBySnapTradeUserId(snapTradeUserId);\n    if (!leader) {\n      console.log(`[WEBHOOK] Skipping trades - leader not found for user ${snapTradeUserId}`);\n      result.skipped = tradesData.length;\n      return result;\n    }\n\n    console.log(\n      `[WEBHOOK] Processing ${tradesData.length} trades for leader ${leader.full_name} (${leader.id})`\n    );\n\n    // Get the account from webhook details if available\n    const accountId = webhookPayload.details?.accountId || webhookPayload.details?.account_id;\n\n    if (!accountId) {\n      console.warn('[WEBHOOK] No account ID in webhook details, using default');\n    }\n\n    // Process each trade\n    for (const trade of tradesData) {\n      try {\n        const tradeId = await createTradeFromWebhook(leader.id, accountId || 'unknown', trade);\n\n        if (tradeId) {\n          result.processed++;\n        } else {\n          result.skipped++;\n        }\n      } catch (error) {\n        console.error(`[WEBHOOK] Error processing trade:`, error);\n        result.errors++;\n      }\n    }\n\n    console.log(`[WEBHOOK] Trade processing complete:`, result);\n    return result;\n  } catch (error) {\n    console.error('[WEBHOOK] Error in processTradesPlacedEvent:', error);\n    result.errors = tradesData.length;\n    return result;\n  }\n}\n\n/**\n * Process ACCOUNT_HOLDINGS_UPDATED webhook event\n * Can be used as fallback or supplementary detection\n */\nexport async function processAccountHoldingsUpdatedEvent(\n  webhookPayload: SnapTradeWebhookPayload\n): Promise<void> {\n  try {\n    const snapTradeUserId = webhookPayload.userId;\n    const leader = await getLeaderBySnapTradeUserId(snapTradeUserId);\n\n    if (!leader) {\n      console.log(`[WEBHOOK] Skipping holdings update - leader not found for user ${snapTradeUserId}`);\n      return;\n    }\n\n    console.log(\n      `[WEBHOOK] Holdings updated for leader ${leader.full_name} (${leader.id})`,\n      webhookPayload.details\n    );\n\n    // Holdings updates are supplementary - the main trade detection\n    // happens via TRADES_PLACED. We could use this for validation.\n  } catch (error) {\n    console.error('[WEBHOOK] Error in processAccountHoldingsUpdatedEvent:', error);\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[1]}