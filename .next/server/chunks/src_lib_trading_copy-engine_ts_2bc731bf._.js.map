{"version":3,"sources":["turbopack:///[project]/src/lib/trading/copy-engine.ts","turbopack:///[project]/src/lib/trading/position-sizing.ts","turbopack:///[project]/src/lib/trading/trade-filters.ts"],"sourcesContent":["/**\n * Copy Trade Engine\n * Converted from Python implementation\n * Executes copy trades for followers when leaders trade\n */\n\nimport { createServiceRoleClient } from '@/lib/supabase/server';\nimport { snaptradeService } from '@/lib/snaptrade/client';\nimport { positionSizingCalculator } from './position-sizing';\nimport { tradeFilterService, type PositionData } from './trade-filters';\nimport type { Database } from '@/lib/supabase/types';\n\ntype LeaderTrade = Database['public']['Tables']['leader_trades']['Row'];\ntype CopyRelationship = Database['public']['Tables']['copy_relationships']['Row'];\ntype User = Database['public']['Tables']['users']['Row'];\ntype BrokerageConnection = Database['public']['Tables']['brokerage_connections']['Row'];\ntype CopyExecution = Database['public']['Tables']['copy_executions']['Insert'];\n\ninterface ExecutionResult {\n  execution: CopyExecution;\n  success: boolean;\n  error?: string;\n}\n\ninterface ProcessStats {\n  totalTrades: number;\n  totalExecutions: number;\n  successfulExecutions: number;\n  failedExecutions: number;\n  skippedExecutions: number;\n}\n\nexport class CopyTradeEngine {\n  private maxRetries: number = 3;\n\n  /**\n   * Get all active followers for a leader\n   */\n  async getActiveFollowers(leaderId: string): Promise<CopyRelationship[]> {\n    const supabase = createServiceRoleClient();\n\n    const { data, error } = await supabase\n      .from('copy_relationships')\n      .select('*')\n      .eq('leader_id', leaderId)\n      .eq('status', 'active');\n\n    if (error) {\n      console.error('Error fetching active followers:', error);\n      return [];\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Get follower's brokerage account\n   */\n  async getFollowerAccount(followerId: string): Promise<BrokerageConnection | null> {\n    const supabase = createServiceRoleClient();\n\n    const { data, error } = await supabase\n      .from('brokerage_connections')\n      .select('*')\n      .eq('user_id', followerId)\n      .eq('status', 'active')\n      .limit(1)\n      .single();\n\n    if (error) {\n      console.error('Error fetching follower account:', error);\n      return null;\n    }\n\n    return data;\n  }\n\n  /**\n   * Get universal symbol ID from SnapTrade\n   */\n  async getUniversalSymbolId(userId: string, userSecret: string, symbol: string): Promise<string | null> {\n    try {\n      const results = await snaptradeService.searchSymbols(symbol);\n\n      // Find exact match\n      const exactMatch = results.find(\n        (r) => r.symbol?.symbol?.toUpperCase() === symbol.toUpperCase()\n      );\n\n      if (exactMatch) {\n        return exactMatch.symbol?.id || null;\n      }\n\n      // Return first result if no exact match\n      return results[0]?.symbol?.id || null;\n    } catch (error) {\n      console.error(`Error searching for symbol ${symbol}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Execute function with exponential backoff retry logic\n   */\n  async executeWithRetry<T>(\n    func: () => Promise<T>,\n    operation: string\n  ): Promise<T> {\n    let lastError: Error | null = null;\n\n    for (let attempt = 0; attempt < this.maxRetries; attempt++) {\n      try {\n        return await func();\n      } catch (error) {\n        lastError = error as Error;\n        if (attempt < this.maxRetries - 1) {\n          const waitTime = Math.pow(2, attempt); // Exponential backoff: 1s, 2s, 4s\n          console.warn(\n            `Attempt ${attempt + 1}/${this.maxRetries} failed for ${operation}: ${lastError.message}. ` +\n            `Retrying in ${waitTime}s...`\n          );\n          await new Promise((resolve) => setTimeout(resolve, waitTime * 1000));\n        } else {\n          console.error(`All ${this.maxRetries} attempts failed for ${operation}: ${lastError.message}`);\n        }\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Get current positions for position sizing and filtering\n   */\n  async getCurrentPositions(\n    relationshipId: string\n  ): Promise<Record<string, PositionData>> {\n    const supabase = createServiceRoleClient();\n\n    // Get all successful copy executions for this relationship\n    const { data: executions, error } = await supabase\n      .from('copy_executions')\n      .select('symbol, action, quantity, executed_price')\n      .eq('relationship_id', relationshipId)\n      .eq('status', 'success');\n\n    if (error || !executions) {\n      return {};\n    }\n\n    const positions: Record<string, PositionData> = {};\n\n    for (const execution of executions) {\n      if (!positions[execution.symbol]) {\n        positions[execution.symbol] = { quantity: 0, value: 0 };\n      }\n\n      const qty = execution.quantity;\n      const price = execution.executed_price || 0;\n\n      if (execution.action === 'buy') {\n        positions[execution.symbol].quantity += qty;\n        positions[execution.symbol].value += qty * price;\n      } else {\n        positions[execution.symbol].quantity -= qty;\n        positions[execution.symbol].value -= qty * price;\n      }\n    }\n\n    // Remove closed positions\n    Object.keys(positions).forEach((symbol) => {\n      if (positions[symbol].quantity <= 0) {\n        delete positions[symbol];\n      }\n    });\n\n    return positions;\n  }\n\n  /**\n   * Get today's trade count and volume for limits\n   */\n  async getTodayStats(relationshipId: string): Promise<{ count: number; volume: number }> {\n    const supabase = createServiceRoleClient();\n\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const { data: executions, error } = await supabase\n      .from('copy_executions')\n      .select('quantity, executed_price')\n      .eq('relationship_id', relationshipId)\n      .eq('status', 'success')\n      .gte('created_at', today.toISOString());\n\n    if (error || !executions) {\n      return { count: 0, volume: 0 };\n    }\n\n    const count = executions.length;\n    const volume = executions.reduce((sum, e) => sum + (e.quantity * (e.executed_price || 0)), 0);\n\n    return { count, volume };\n  }\n\n  /**\n   * Execute a copy trade for a single follower\n   */\n  async executeCopyTrade(\n    trade: LeaderTrade,\n    relationship: CopyRelationship,\n    follower: User,\n    followerAccount: BrokerageConnection\n  ): Promise<ExecutionResult> {\n    const supabase = createServiceRoleClient();\n\n    // Initialize execution record\n    const execution: CopyExecution = {\n      trade_id: trade.id,\n      relationship_id: relationship.id,\n      follower_id: follower.id,\n      symbol: trade.symbol,\n      action: trade.action,\n      quantity: 0,\n      status: 'pending',\n      account_id: followerAccount.account_id,\n      asset_type: trade.asset_type,\n    };\n\n    try {\n      // Step 1: Get current positions and today's stats for filtering\n      const [currentPositions, todayStats] = await Promise.all([\n        this.getCurrentPositions(relationship.id),\n        this.getTodayStats(relationship.id),\n      ]);\n\n      // Step 2: Check if trade should be copied (filters + exposure limits)\n      const filterResult = await tradeFilterService.shouldCopyTrade(\n        {\n          symbol: trade.symbol,\n          price: trade.price,\n          quantity: trade.quantity,\n          action: trade.action === 'buy' ? 'BUY' : 'SELL',\n          asset_type: trade.asset_type.toUpperCase() as any,\n          expiration_date: trade.expiration_date,\n        },\n        relationship,\n        followerAccount.balance,\n        currentPositions,\n        todayStats.count,\n        todayStats.volume\n      );\n\n      if (!filterResult.shouldCopy) {\n        execution.status = 'skipped';\n        execution.error_message = `Filtered: ${filterResult.skipReason}`;\n\n        const { error } = await supabase.from('copy_executions').insert(execution);\n        if (error) console.error('Error saving skipped execution:', error);\n\n        console.info(`Trade skipped for follower ${follower.id}: ${filterResult.skipReason}`);\n\n        return { execution, success: false, error: filterResult.skipReason };\n      }\n\n      // Step 3: Get universal symbol ID\n      const universalSymbolId = await this.getUniversalSymbolId(\n        follower.snaptrade_user_id!,\n        follower.snaptrade_user_secret!,\n        trade.symbol\n      );\n\n      if (!universalSymbolId) {\n        execution.status = 'failed';\n        execution.error_message = `Symbol ${trade.symbol} not found`;\n\n        const { error } = await supabase.from('copy_executions').insert(execution);\n        if (error) console.error('Error saving failed execution:', error);\n\n        return { execution, success: false, error: execution.error_message };\n      }\n\n      // Step 4: Get current stock price for position sizing\n      let currentPrice = trade.price || 0;\n      if (currentPrice === 0) {\n        try {\n          const quote = await snaptradeService.getStockQuote(\n            follower.snaptrade_user_id!,\n            follower.snaptrade_user_secret!,\n            followerAccount.account_id,\n            trade.symbol\n          );\n          currentPrice = quote.price;\n        } catch {\n          currentPrice = 100; // Fallback\n        }\n      }\n\n      // Step 5: Calculate follower quantity using position sizing\n      const sizingResult = positionSizingCalculator.calculatePositionSize(\n        relationship,\n        trade.quantity,\n        trade.price,\n        followerAccount.balance,\n        currentPrice\n      );\n\n      execution.quantity = sizingResult.quantity;\n\n      console.info(\n        `Position sizing: method=${sizingResult.method_used}, ` +\n        `quantity=${sizingResult.quantity}, cost=$${sizingResult.estimated_cost.toFixed(2)}, ` +\n        `capped=${sizingResult.capped}`\n      );\n\n      if (sizingResult.quantity === 0) {\n        execution.status = 'skipped';\n        execution.error_message = 'Position size calculated as 0';\n\n        const { error } = await supabase.from('copy_executions').insert(execution);\n        if (error) console.error('Error saving execution:', error);\n\n        return { execution, success: false, error: execution.error_message };\n      }\n\n      // Step 6: Check trade impact\n      const impact = await snaptradeService.checkTradeImpact(\n        follower.snaptrade_user_id!,\n        follower.snaptrade_user_secret!,\n        followerAccount.account_id,\n        trade.action.toUpperCase() as 'BUY' | 'SELL',\n        universalSymbolId,\n        'Market',\n        sizingResult.quantity\n      );\n\n      if (!impact || !impact.trade) {\n        execution.status = 'failed';\n        execution.error_message = 'Trade impact validation failed';\n\n        const { error } = await supabase.from('copy_executions').insert(execution);\n        if (error) console.error('Error saving execution:', error);\n\n        return { execution, success: false, error: execution.error_message };\n      }\n\n      // Step 7: Execute trade with retry logic\n      const tradeId = impact.trade.id;\n      const order = await this.executeWithRetry(\n        () => snaptradeService.placeOrder(\n          follower.snaptrade_user_id!,\n          follower.snaptrade_user_secret!,\n          tradeId,\n          true // wait for confirmation\n        ),\n        `place order for ${trade.symbol}`\n      );\n\n      // Step 8: Update execution record\n      execution.status = 'success';\n      execution.order_id = order.order_id;\n      execution.executed_at = new Date().toISOString();\n      execution.executed_price = order.executed_price || currentPrice;\n\n      console.info(\n        `Copy trade executed: follower=${follower.id}, ` +\n        `symbol=${trade.symbol}, action=${trade.action}, ` +\n        `quantity=${sizingResult.quantity}, price=$${execution.executed_price.toFixed(2)}`\n      );\n\n      // Step 9: Place automatic stop-loss if enabled\n      if (relationship.auto_stop_loss_enabled && relationship.auto_stop_loss_percent) {\n        try {\n          const stopPrice = positionSizingCalculator.calculateStopLossPrice(\n            execution.executed_price,\n            relationship.auto_stop_loss_percent,\n            trade.action.toUpperCase() as 'BUY' | 'SELL'\n          );\n\n          // Note: Stop-loss order placement would go here\n          // SnapTrade API needs to support stop orders\n          execution.stop_loss_price = stopPrice;\n\n          console.info(`Stop-loss calculated: price=$${stopPrice.toFixed(2)}`);\n        } catch (error) {\n          console.error('Failed to place stop-loss order:', error);\n        }\n      }\n\n      // Step 10: Place automatic take-profit if enabled\n      if (relationship.auto_take_profit_enabled && relationship.auto_take_profit_percent) {\n        try {\n          const takeProfitPrice = positionSizingCalculator.calculateTakeProfitPrice(\n            execution.executed_price,\n            relationship.auto_take_profit_percent,\n            trade.action.toUpperCase() as 'BUY' | 'SELL'\n          );\n\n          execution.take_profit_price = takeProfitPrice;\n\n          console.info(`Take-profit calculated: price=$${takeProfitPrice.toFixed(2)}`);\n        } catch (error) {\n          console.error('Failed to place take-profit order:', error);\n        }\n      }\n\n      // Step 11: Update relationship statistics\n      await supabase\n        .from('copy_relationships')\n        .update({\n          total_trades_copied: relationship.total_trades_copied + 1,\n        })\n        .eq('id', relationship.id);\n\n      // Step 12: Save execution record\n      const { error: insertError } = await supabase.from('copy_executions').insert(execution);\n      if (insertError) {\n        console.error('Error saving successful execution:', insertError);\n      }\n\n      // Step 13: Create in-app notification\n      await supabase.from('notifications').insert({\n        user_id: follower.id,\n        type: 'trade_executed',\n        title: 'Trade Executed',\n        message: `Copied ${trade.action} ${sizingResult.quantity} ${trade.symbol} at $${execution.executed_price.toFixed(2)}`,\n        metadata: {\n          trade_id: trade.id,\n          symbol: trade.symbol,\n          action: trade.action,\n          quantity: sizingResult.quantity,\n          price: execution.executed_price,\n        },\n      });\n\n      return { execution, success: true };\n    } catch (error) {\n      execution.status = 'failed';\n      execution.error_message = (error as Error).message;\n\n      console.error(`Error executing copy trade for follower ${follower.id}:`, error);\n\n      // Save failed execution\n      const { error: insertError } = await supabase.from('copy_executions').insert(execution);\n      if (insertError) console.error('Error saving failed execution:', insertError);\n\n      // Create failure notification\n      await supabase.from('notifications').insert({\n        user_id: follower.id,\n        type: 'trade_failed',\n        title: 'Trade Failed',\n        message: `Failed to copy ${trade.action} ${trade.symbol}: ${execution.error_message}`,\n        metadata: {\n          trade_id: trade.id,\n          symbol: trade.symbol,\n          error: execution.error_message,\n        },\n      });\n\n      return { execution, success: false, error: execution.error_message };\n    }\n  }\n\n  /**\n   * Process a leader trade and execute copies for all followers\n   */\n  async processTrade(trade: LeaderTrade): Promise<ExecutionResult[]> {\n    const supabase = createServiceRoleClient();\n\n    // Get all active followers\n    const relationships = await this.getActiveFollowers(trade.leader_id);\n\n    console.info(`Processing trade ${trade.id} for ${relationships.length} followers`);\n\n    const results: ExecutionResult[] = [];\n\n    for (const relationship of relationships) {\n      // Get follower\n      const { data: follower } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', relationship.follower_id)\n        .single();\n\n      if (!follower) {\n        console.warn(`Follower ${relationship.follower_id} not found`);\n        continue;\n      }\n\n      // Get follower account\n      const followerAccount = await this.getFollowerAccount(follower.id);\n\n      if (!followerAccount) {\n        console.warn(`No account found for follower ${follower.id}`);\n\n        // Create skipped execution\n        const execution: CopyExecution = {\n          trade_id: trade.id,\n          relationship_id: relationship.id,\n          follower_id: follower.id,\n          symbol: trade.symbol,\n          action: trade.action,\n          quantity: 0,\n          status: 'skipped',\n          error_message: 'No brokerage account connected',\n          account_id: 'none',\n        };\n\n        await supabase.from('copy_executions').insert(execution);\n        results.push({ execution, success: false, error: execution.error_message });\n        continue;\n      }\n\n      // Execute copy trade\n      const result = await this.executeCopyTrade(trade, relationship, follower, followerAccount);\n      results.push(result);\n    }\n\n    return results;\n  }\n\n  /**\n   * Process all pending trades\n   */\n  async processAllPendingTrades(): Promise<ProcessStats> {\n    const supabase = createServiceRoleClient();\n\n    // Get unprocessed trades\n    const { data: pendingTrades, error } = await supabase\n      .from('leader_trades')\n      .select('*')\n      .eq('processed', false)\n      .order('detected_at', { ascending: true });\n\n    if (error || !pendingTrades) {\n      console.error('Error fetching pending trades:', error);\n      return {\n        totalTrades: 0,\n        totalExecutions: 0,\n        successfulExecutions: 0,\n        failedExecutions: 0,\n        skippedExecutions: 0,\n      };\n    }\n\n    const stats: ProcessStats = {\n      totalTrades: pendingTrades.length,\n      totalExecutions: 0,\n      successfulExecutions: 0,\n      failedExecutions: 0,\n      skippedExecutions: 0,\n    };\n\n    console.info(`Processing ${pendingTrades.length} pending trades`);\n\n    for (const trade of pendingTrades) {\n      const results = await this.processTrade(trade);\n\n      stats.totalExecutions += results.length;\n      stats.successfulExecutions += results.filter((r) => r.success).length;\n      stats.failedExecutions += results.filter((r) => !r.success && r.execution.status === 'failed').length;\n      stats.skippedExecutions += results.filter((r) => r.execution.status === 'skipped').length;\n\n      // Mark trade as processed\n      await supabase\n        .from('leader_trades')\n        .update({ processed: true })\n        .eq('id', trade.id);\n    }\n\n    console.info('Processing complete:', stats);\n    return stats;\n  }\n}\n\n// Export singleton instance\nexport const copyTradeEngine = new CopyTradeEngine();\nexport default copyTradeEngine;\n","/**\n * Position Sizing Calculator\n * Converted from Python implementation\n * Calculates appropriate position sizes based on different methods\n */\n\n/**\n * Position sizing methods available\n */\nexport enum PositionSizingMethod {\n  PROPORTIONAL = 'proportional',     // Use X% of portfolio for each trade\n  FIXED_DOLLAR = 'fixed_dollar',     // Always invest exactly $X per trade\n  FIXED_SHARES = 'fixed_shares',     // Always buy exactly X shares\n  RISK_BASED = 'risk_based',         // Size based on risk percentage\n  MULTIPLIER = 'multiplier',         // Copy leader at X times their size\n}\n\n/**\n * Copy relationship settings needed for position sizing\n */\nexport interface CopyRelationshipSettings {\n  position_sizing_method: PositionSizingMethod;\n  allocation_percent?: number;      // For proportional\n  fixed_dollar_amount?: number;     // For fixed dollar\n  fixed_shares_amount?: number;     // For fixed shares\n  risk_percent?: number;            // For risk-based\n  auto_stop_loss_percent?: number;  // For risk-based\n  multiplier?: number;              // For multiplier\n  max_position_size?: number;       // Max dollar amount cap (applies to all methods)\n}\n\n/**\n * Result from position size calculation\n */\nexport interface PositionSizeResult {\n  quantity: number;         // Number of shares/contracts to buy\n  estimated_cost: number;   // Estimated dollar cost\n  method_used: string;      // Which sizing method was applied\n  capped: boolean;          // Whether max_position_size limit was applied\n}\n\nexport class PositionSizingCalculator {\n  /**\n   * Calculate appropriate position size for follower\n   *\n   * @param relationship - Copy relationship settings\n   * @param leaderQuantity - Leader's trade quantity\n   * @param leaderPrice - Leader's execution price (if available)\n   * @param followerBalance - Follower's account balance\n   * @param currentStockPrice - Current market price of the stock\n   * @returns Position size calculation result\n   */\n  calculatePositionSize(\n    relationship: CopyRelationshipSettings,\n    leaderQuantity: number,\n    leaderPrice: number | null,\n    followerBalance: number,\n    currentStockPrice: number\n  ): PositionSizeResult {\n    const method = relationship.position_sizing_method;\n    const price = leaderPrice || currentStockPrice;\n\n    switch (method) {\n      case PositionSizingMethod.PROPORTIONAL:\n        return this._proportionalSizing(\n          relationship.allocation_percent || 10,\n          followerBalance,\n          price,\n          relationship.max_position_size\n        );\n\n      case PositionSizingMethod.FIXED_DOLLAR:\n        return this._fixedDollarSizing(\n          relationship.fixed_dollar_amount,\n          price,\n          relationship.max_position_size\n        );\n\n      case PositionSizingMethod.FIXED_SHARES:\n        return this._fixedSharesSizing(\n          relationship.fixed_shares_amount,\n          price,\n          relationship.max_position_size\n        );\n\n      case PositionSizingMethod.RISK_BASED:\n        return this._riskBasedSizing(\n          relationship.risk_percent,\n          relationship.auto_stop_loss_percent,\n          followerBalance,\n          price,\n          relationship.max_position_size\n        );\n\n      case PositionSizingMethod.MULTIPLIER:\n        return this._multiplierSizing(\n          relationship.multiplier,\n          leaderQuantity,\n          price,\n          relationship.max_position_size\n        );\n\n      default:\n        console.error(`Unknown position sizing method: ${method}`);\n        return {\n          quantity: 0,\n          estimated_cost: 0,\n          method_used: 'error',\n          capped: false,\n        };\n    }\n  }\n\n  /**\n   * Proportional sizing: Use X% of portfolio for each trade\n   *\n   * Example: 10% allocation with $10,000 balance = $1,000 per trade\n   */\n  private _proportionalSizing(\n    allocationPercent: number,\n    followerBalance: number,\n    price: number,\n    maxPositionSize?: number\n  ): PositionSizeResult {\n    if (!allocationPercent || allocationPercent <= 0) {\n      allocationPercent = 10.0; // Default to 10%\n    }\n\n    // Calculate dollar amount to invest\n    let dollarAmount = (allocationPercent / 100.0) * followerBalance;\n\n    // Apply max position size cap if set\n    let capped = false;\n    if (maxPositionSize && dollarAmount > maxPositionSize) {\n      dollarAmount = maxPositionSize;\n      capped = true;\n    }\n\n    // Calculate quantity (ensure at least 1 share if affordable)\n    let quantity = price > 0 ? Math.floor(dollarAmount / price) : 0;\n\n    if (quantity === 0 && dollarAmount >= price && price > 0) {\n      quantity = 1;\n    }\n\n    return {\n      quantity,\n      estimated_cost: quantity * price,\n      method_used: 'proportional',\n      capped,\n    };\n  }\n\n  /**\n   * Fixed dollar sizing: Always invest exactly $X per trade\n   *\n   * Example: $500 fixed amount, $50 stock = 10 shares\n   */\n  private _fixedDollarSizing(\n    fixedAmount: number | undefined,\n    price: number,\n    maxPositionSize?: number\n  ): PositionSizeResult {\n    if (!fixedAmount || fixedAmount <= 0) {\n      console.error('Fixed dollar amount not set');\n      return { quantity: 0, estimated_cost: 0, method_used: 'error', capped: false };\n    }\n\n    let dollarAmount = fixedAmount;\n\n    // Apply max position size cap if set\n    let capped = false;\n    if (maxPositionSize && dollarAmount > maxPositionSize) {\n      dollarAmount = maxPositionSize;\n      capped = true;\n    }\n\n    // Calculate quantity\n    let quantity = price > 0 ? Math.floor(dollarAmount / price) : 0;\n\n    if (quantity === 0 && dollarAmount >= price && price > 0) {\n      quantity = 1;\n    }\n\n    return {\n      quantity,\n      estimated_cost: quantity * price,\n      method_used: 'fixed_dollar',\n      capped,\n    };\n  }\n\n  /**\n   * Fixed shares sizing: Always buy exactly X shares\n   *\n   * Example: Always buy 10 shares regardless of price\n   */\n  private _fixedSharesSizing(\n    fixedShares: number | undefined,\n    price: number,\n    maxPositionSize?: number\n  ): PositionSizeResult {\n    if (!fixedShares || fixedShares <= 0) {\n      console.error('Fixed shares amount not set');\n      return { quantity: 0, estimated_cost: 0, method_used: 'error', capped: false };\n    }\n\n    let quantity = Math.floor(fixedShares);\n    let estimatedCost = quantity * price;\n\n    // Apply max position size cap if set\n    let capped = false;\n    if (maxPositionSize && estimatedCost > maxPositionSize) {\n      // Reduce quantity to fit within max\n      quantity = price > 0 ? Math.floor(maxPositionSize / price) : 0;\n      estimatedCost = quantity * price;\n      capped = true;\n    }\n\n    return {\n      quantity,\n      estimated_cost: estimatedCost,\n      method_used: 'fixed_shares',\n      capped,\n    };\n  }\n\n  /**\n   * Risk-based sizing: Size position so that if stop-loss hits, you lose X% of account\n   *\n   * Example: Risk 2% of $10,000 = $200 max loss\n   *          Stop-loss at 5% = position size can be $4,000\n   *          ($4,000 * 5% loss = $200 total loss = 2% of account)\n   *\n   * Formula: Position Size = (Account Balance * Risk%) / Stop Loss%\n   */\n  private _riskBasedSizing(\n    riskPercent: number | undefined,\n    stopLossPercent: number | undefined,\n    followerBalance: number,\n    price: number,\n    maxPositionSize?: number\n  ): PositionSizeResult {\n    if (!riskPercent || riskPercent <= 0) {\n      console.error('Risk percent not set');\n      return { quantity: 0, estimated_cost: 0, method_used: 'error', capped: false };\n    }\n\n    if (!stopLossPercent || stopLossPercent <= 0) {\n      console.warn('Stop-loss percent not set, defaulting to 5%');\n      stopLossPercent = 5.0; // Default stop-loss\n    }\n\n    // Calculate max dollar risk\n    const maxRiskDollars = (riskPercent / 100.0) * followerBalance;\n\n    // Calculate position size based on stop-loss\n    // If we can lose stop_loss_percent of position, and that should equal max_risk_dollars:\n    let dollarAmount = (maxRiskDollars / stopLossPercent) * 100;\n\n    // Apply max position size cap if set\n    let capped = false;\n    if (maxPositionSize && dollarAmount > maxPositionSize) {\n      dollarAmount = maxPositionSize;\n      capped = true;\n    }\n\n    // Calculate quantity\n    let quantity = price > 0 ? Math.floor(dollarAmount / price) : 0;\n\n    if (quantity === 0 && dollarAmount >= price && price > 0) {\n      quantity = 1;\n    }\n\n    return {\n      quantity,\n      estimated_cost: quantity * price,\n      method_used: 'risk_based',\n      capped,\n    };\n  }\n\n  /**\n   * Multiplier sizing: Copy leader at X times their size\n   *\n   * Example: Leader buys 100 shares, multiplier 0.5 = you buy 50 shares\n   *          Leader buys 100 shares, multiplier 2.0 = you buy 200 shares\n   */\n  private _multiplierSizing(\n    multiplier: number | undefined,\n    leaderQuantity: number,\n    price: number,\n    maxPositionSize?: number\n  ): PositionSizeResult {\n    if (!multiplier || multiplier <= 0) {\n      console.error('Multiplier not set');\n      return { quantity: 0, estimated_cost: 0, method_used: 'error', capped: false };\n    }\n\n    // Calculate quantity as multiple of leader's quantity\n    let quantity = Math.floor(leaderQuantity * multiplier);\n\n    if (quantity < 1) {\n      quantity = 1; // At minimum, copy 1 share\n    }\n\n    let estimatedCost = quantity * price;\n\n    // Apply max position size cap if set\n    let capped = false;\n    if (maxPositionSize && estimatedCost > maxPositionSize) {\n      quantity = price > 0 ? Math.floor(maxPositionSize / price) : 0;\n      estimatedCost = quantity * price;\n      capped = true;\n    }\n\n    return {\n      quantity,\n      estimated_cost: estimatedCost,\n      method_used: 'multiplier',\n      capped,\n    };\n  }\n\n  /**\n   * Calculate stop-loss price\n   *\n   * For BUY orders: Stop-loss is below entry price\n   * For SELL orders: Stop-loss is above entry price\n   */\n  calculateStopLossPrice(\n    entryPrice: number,\n    stopLossPercent: number,\n    action: 'BUY' | 'SELL'\n  ): number {\n    if (action.toUpperCase() === 'BUY') {\n      // For long positions, stop-loss is below entry\n      const stopPrice = entryPrice * (1 - stopLossPercent / 100.0);\n      return Math.round(stopPrice * 100) / 100;\n    } else {\n      // For short positions, stop-loss is above entry\n      const stopPrice = entryPrice * (1 + stopLossPercent / 100.0);\n      return Math.round(stopPrice * 100) / 100;\n    }\n  }\n\n  /**\n   * Calculate take-profit price\n   *\n   * For BUY orders: Take-profit is above entry price\n   * For SELL orders: Take-profit is below entry price\n   */\n  calculateTakeProfitPrice(\n    entryPrice: number,\n    takeProfitPercent: number,\n    action: 'BUY' | 'SELL'\n  ): number {\n    if (action.toUpperCase() === 'BUY') {\n      // For long positions, take-profit is above entry\n      const takeProfit = entryPrice * (1 + takeProfitPercent / 100.0);\n      return Math.round(takeProfit * 100) / 100;\n    } else {\n      // For short positions, take-profit is below entry\n      const takeProfit = entryPrice * (1 - takeProfitPercent / 100.0);\n      return Math.round(takeProfit * 100) / 100;\n    }\n  }\n}\n\n// Export singleton instance\nexport const positionSizingCalculator = new PositionSizingCalculator();\nexport default positionSizingCalculator;\n","/**\n * Trade Filtering and Exposure Limit Service\n * Converted from Python implementation\n * Filters trades based on user preferences and enforces exposure limits\n */\n\nexport interface TradeData {\n  symbol: string;\n  price: number | null;\n  quantity: number;\n  action: 'BUY' | 'SELL';\n  asset_type: 'STOCK' | 'OPTION' | 'ETF' | 'CRYPTO';\n  expiration_date?: string | null;\n}\n\nexport interface CopyRelationshipFilters {\n  // Asset type filters\n  skip_penny_stocks?: boolean;\n  skip_options?: boolean;\n  skip_0dte_options?: boolean;\n  skip_crypto?: boolean;\n\n  // Market cap filters\n  filter_by_market_cap?: boolean;\n  min_market_cap?: number; // in billions\n  max_market_cap?: number; // in billions\n\n  // Price filters\n  filter_by_price?: boolean;\n  min_stock_price?: number;\n  max_stock_price?: number;\n\n  // Sector filters\n  filter_by_sector?: boolean;\n  allowed_sectors?: string; // comma-separated\n  blocked_sectors?: string; // comma-separated\n\n  // Exposure limits\n  enable_exposure_limits?: boolean;\n  max_position_concentration?: number; // % of portfolio in single stock\n  max_sector_concentration?: number; // % of portfolio in single sector\n  max_open_positions?: number; // total number of positions\n  max_daily_trades?: number; // trades per day\n  max_daily_volume?: number; // dollar amount per day\n}\n\nexport interface PositionData {\n  quantity: number;\n  value: number;\n}\n\nexport interface FilterResult {\n  shouldCopy: boolean;\n  skipReason?: string;\n}\n\nexport class TradeFilterService {\n  private sectorMapping: Record<string, string> = {\n    // Common sectors (would be expanded with real API data)\n    AAPL: 'Technology',\n    MSFT: 'Technology',\n    GOOGL: 'Technology',\n    AMZN: 'Consumer Cyclical',\n    TSLA: 'Consumer Cyclical',\n    JPM: 'Financial Services',\n    BAC: 'Financial Services',\n    XOM: 'Energy',\n    CVX: 'Energy',\n    JNJ: 'Healthcare',\n    PFE: 'Healthcare',\n    // Add more mappings or integrate with external API\n  };\n\n  private marketCapData: Record<string, number> = {\n    // Mock market cap data in billions (would use real-time API)\n    AAPL: 2800.0,\n    MSFT: 2500.0,\n    GOOGL: 1700.0,\n    AMZN: 1400.0,\n    TSLA: 800.0,\n    JPM: 450.0,\n    // Add more or use API like Alpha Vantage, Yahoo Finance\n  };\n\n  /**\n   * Determine if a trade should be copied based on filters and limits\n   * @returns FilterResult with shouldCopy and optional skipReason\n   */\n  async shouldCopyTrade(\n    trade: TradeData,\n    relationship: CopyRelationshipFilters,\n    accountBalance: number,\n    currentPositions: Record<string, PositionData>,\n    todayTradeCount: number,\n    todayVolume: number\n  ): Promise<FilterResult> {\n    // 1. Check trade filtering\n    const filterResult = this._checkTradeFilters(trade, relationship);\n    if (!filterResult.shouldCopy) {\n      return filterResult;\n    }\n\n    // 2. Check exposure limits\n    const exposureResult = this._checkExposureLimits(\n      trade,\n      relationship,\n      accountBalance,\n      currentPositions,\n      todayTradeCount,\n      todayVolume\n    );\n    if (!exposureResult.shouldCopy) {\n      return exposureResult;\n    }\n\n    // All checks passed\n    return { shouldCopy: true };\n  }\n\n  /**\n   * Check if trade passes all filtering criteria\n   */\n  private _checkTradeFilters(\n    trade: TradeData,\n    relationship: CopyRelationshipFilters\n  ): FilterResult {\n    // Skip penny stocks filter\n    if (relationship.skip_penny_stocks) {\n      if (trade.price && trade.price < 5.0) {\n        return {\n          shouldCopy: false,\n          skipReason: `Penny stock ($${trade.price.toFixed(2)} < $5.00)`,\n        };\n      }\n    }\n\n    // Skip options filter\n    if (relationship.skip_options) {\n      if (trade.asset_type === 'OPTION') {\n        return {\n          shouldCopy: false,\n          skipReason: 'Options trades disabled',\n        };\n      }\n    }\n\n    // Skip 0DTE options filter\n    if (relationship.skip_0dte_options) {\n      if (trade.asset_type === 'OPTION' && trade.expiration_date) {\n        try {\n          const expDate = new Date(trade.expiration_date);\n          const today = new Date();\n          const daysDiff = Math.floor(\n            (expDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)\n          );\n          if (daysDiff === 0) {\n            return {\n              shouldCopy: false,\n              skipReason: '0DTE options disabled',\n            };\n          }\n        } catch (e) {\n          // Invalid date format, skip\n        }\n      }\n    }\n\n    // Skip crypto filter\n    if (relationship.skip_crypto) {\n      if (trade.asset_type === 'CRYPTO') {\n        return {\n          shouldCopy: false,\n          skipReason: 'Crypto trades disabled',\n        };\n      }\n    }\n\n    // Market cap filtering\n    if (relationship.filter_by_market_cap) {\n      const marketCap = this._getMarketCap(trade.symbol);\n\n      if (marketCap) {\n        if (relationship.min_market_cap && marketCap < relationship.min_market_cap) {\n          return {\n            shouldCopy: false,\n            skipReason: `Market cap $${marketCap.toFixed(1)}B < min $${relationship.min_market_cap.toFixed(1)}B`,\n          };\n        }\n\n        if (relationship.max_market_cap && marketCap > relationship.max_market_cap) {\n          return {\n            shouldCopy: false,\n            skipReason: `Market cap $${marketCap.toFixed(1)}B > max $${relationship.max_market_cap.toFixed(1)}B`,\n          };\n        }\n      }\n    }\n\n    // Price filtering\n    if (relationship.filter_by_price && trade.price) {\n      if (relationship.min_stock_price && trade.price < relationship.min_stock_price) {\n        return {\n          shouldCopy: false,\n          skipReason: `Price $${trade.price.toFixed(2)} < min $${relationship.min_stock_price.toFixed(2)}`,\n        };\n      }\n\n      if (relationship.max_stock_price && trade.price > relationship.max_stock_price) {\n        return {\n          shouldCopy: false,\n          skipReason: `Price $${trade.price.toFixed(2)} > max $${relationship.max_stock_price.toFixed(2)}`,\n        };\n      }\n    }\n\n    // Sector filtering\n    if (relationship.filter_by_sector) {\n      const sector = this._getSector(trade.symbol);\n\n      if (sector) {\n        // Check allowed sectors\n        if (relationship.allowed_sectors) {\n          const allowed = relationship.allowed_sectors.split(',').map((s) => s.trim());\n          if (!allowed.includes(sector)) {\n            return {\n              shouldCopy: false,\n              skipReason: `Sector '${sector}' not in allowed list`,\n            };\n          }\n        }\n\n        // Check blocked sectors\n        if (relationship.blocked_sectors) {\n          const blocked = relationship.blocked_sectors.split(',').map((s) => s.trim());\n          if (blocked.includes(sector)) {\n            return {\n              shouldCopy: false,\n              skipReason: `Sector '${sector}' is blocked`,\n            };\n          }\n        }\n      }\n    }\n\n    // All filters passed\n    return { shouldCopy: true };\n  }\n\n  /**\n   * Check if trade would exceed exposure limits\n   */\n  private _checkExposureLimits(\n    trade: TradeData,\n    relationship: CopyRelationshipFilters,\n    accountBalance: number,\n    currentPositions: Record<string, PositionData>,\n    todayTradeCount: number,\n    todayVolume: number\n  ): FilterResult {\n    if (!relationship.enable_exposure_limits) {\n      return { shouldCopy: true };\n    }\n\n    // Default balance if not available\n    const balance = accountBalance > 0 ? accountBalance : 10000.0;\n\n    // Check max open positions\n    if (relationship.max_open_positions) {\n      if (Object.keys(currentPositions).length >= relationship.max_open_positions) {\n        return {\n          shouldCopy: false,\n          skipReason: `Max open positions reached (${relationship.max_open_positions})`,\n        };\n      }\n    }\n\n    // Check position concentration (% of portfolio in single stock)\n    if (relationship.max_position_concentration) {\n      const estimatedPositionValue = trade.quantity * (trade.price || 100.0);\n\n      // Get existing position in this symbol\n      const existingValue = currentPositions[trade.symbol]?.value || 0;\n      const totalValue = existingValue + estimatedPositionValue;\n\n      const concentration = (totalValue / balance) * 100;\n\n      if (concentration > relationship.max_position_concentration) {\n        return {\n          shouldCopy: false,\n          skipReason: `Position concentration ${concentration.toFixed(1)}% > max ${relationship.max_position_concentration.toFixed(1)}%`,\n        };\n      }\n    }\n\n    // Check sector concentration\n    if (relationship.max_sector_concentration) {\n      const sector = this._getSector(trade.symbol);\n      if (sector) {\n        const sectorExposure = this._calculateSectorExposure(sector, currentPositions, balance);\n\n        const estimatedPositionValue = trade.quantity * (trade.price || 100.0);\n        const newSectorExposure =\n          ((sectorExposure * balance) / 100 + estimatedPositionValue) / balance * 100;\n\n        if (newSectorExposure > relationship.max_sector_concentration) {\n          return {\n            shouldCopy: false,\n            skipReason: `Sector '${sector}' concentration ${newSectorExposure.toFixed(1)}% > max ${relationship.max_sector_concentration.toFixed(1)}%`,\n          };\n        }\n      }\n    }\n\n    // Check daily trade limit\n    if (relationship.max_daily_trades) {\n      if (todayTradeCount >= relationship.max_daily_trades) {\n        return {\n          shouldCopy: false,\n          skipReason: `Daily trade limit reached (${relationship.max_daily_trades})`,\n        };\n      }\n    }\n\n    // Check daily volume limit\n    if (relationship.max_daily_volume) {\n      const estimatedTradeValue = trade.quantity * (trade.price || 100.0);\n\n      if (todayVolume + estimatedTradeValue > relationship.max_daily_volume) {\n        return {\n          shouldCopy: false,\n          skipReason: `Daily volume limit would be exceeded ($${(todayVolume + estimatedTradeValue).toFixed(2)} > $${relationship.max_daily_volume.toFixed(2)})`,\n        };\n      }\n    }\n\n    // All exposure limits passed\n    return { shouldCopy: true };\n  }\n\n  /**\n   * Calculate % of portfolio in a sector\n   */\n  private _calculateSectorExposure(\n    sector: string,\n    currentPositions: Record<string, PositionData>,\n    accountBalance: number\n  ): number {\n    let sectorValue = 0;\n\n    for (const [symbol, position] of Object.entries(currentPositions)) {\n      const symbolSector = this._getSector(symbol);\n      if (symbolSector === sector) {\n        sectorValue += position.value;\n      }\n    }\n\n    return accountBalance > 0 ? (sectorValue / accountBalance) * 100 : 0;\n  }\n\n  /**\n   * Get market cap in billions for a symbol\n   * In production, use real-time API (e.g., Alpha Vantage, Yahoo Finance)\n   */\n  private _getMarketCap(symbol: string): number | undefined {\n    return this.marketCapData[symbol];\n  }\n\n  /**\n   * Get sector for a symbol\n   * In production, use real-time API\n   */\n  private _getSector(symbol: string): string | undefined {\n    return this.sectorMapping[symbol];\n  }\n\n  /**\n   * Get a summary of active filters and limits\n   */\n  getFilterSummary(relationship: CopyRelationshipFilters): {\n    active_filters: string[];\n    active_limits: string[];\n    total_protections: number;\n  } {\n    const activeFilters: string[] = [];\n    const activeLimits: string[] = [];\n\n    // Check active filters\n    if (relationship.skip_penny_stocks) {\n      activeFilters.push('Skip penny stocks (<$5)');\n    }\n\n    if (relationship.skip_options) {\n      activeFilters.push('Skip all options');\n    }\n\n    if (relationship.skip_0dte_options) {\n      activeFilters.push('Skip 0DTE options');\n    }\n\n    if (relationship.filter_by_market_cap) {\n      if (relationship.min_market_cap) {\n        activeFilters.push(`Min market cap: $${relationship.min_market_cap}B`);\n      }\n      if (relationship.max_market_cap) {\n        activeFilters.push(`Max market cap: $${relationship.max_market_cap}B`);\n      }\n    }\n\n    if (relationship.filter_by_price) {\n      if (relationship.min_stock_price) {\n        activeFilters.push(`Min price: $${relationship.min_stock_price}`);\n      }\n      if (relationship.max_stock_price) {\n        activeFilters.push(`Max price: $${relationship.max_stock_price}`);\n      }\n    }\n\n    if (relationship.filter_by_sector) {\n      if (relationship.allowed_sectors) {\n        activeFilters.push(`Allowed sectors: ${relationship.allowed_sectors}`);\n      }\n      if (relationship.blocked_sectors) {\n        activeFilters.push(`Blocked sectors: ${relationship.blocked_sectors}`);\n      }\n    }\n\n    // Check active limits\n    if (relationship.enable_exposure_limits) {\n      if (relationship.max_position_concentration) {\n        activeLimits.push(`Max position: ${relationship.max_position_concentration}%`);\n      }\n\n      if (relationship.max_sector_concentration) {\n        activeLimits.push(`Max sector: ${relationship.max_sector_concentration}%`);\n      }\n\n      if (relationship.max_open_positions) {\n        activeLimits.push(`Max positions: ${relationship.max_open_positions}`);\n      }\n\n      if (relationship.max_daily_trades) {\n        activeLimits.push(`Max daily trades: ${relationship.max_daily_trades}`);\n      }\n\n      if (relationship.max_daily_volume) {\n        activeLimits.push(`Max daily volume: $${relationship.max_daily_volume.toLocaleString()}`);\n      }\n    }\n\n    return {\n      active_filters: activeFilters,\n      active_limits: activeLimits,\n      total_protections: activeFilters.length + activeLimits.length,\n    };\n  }\n}\n\n// Export singleton instance\nexport const tradeFilterService = new TradeFilterService();\nexport default tradeFilterService;\n"],"names":[],"mappings":"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"}