// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/branding" | "/dashboard" | "/dashboard/analytics" | "/dashboard/portfolio" | "/dashboard/settings" | "/dashboard/trades" | "/faq" | "/features" | "/follower/orders" | "/leader" | "/leader/orders" | "/leaders" | "/leaders/[id]" | "/onboarding" | "/sign-in/[[...sign-in]]" | "/sign-up/[[...sign-up]]" | "/testimonials" | "/trades/[id]/analytics" | "/watchlist"
type AppRouteHandlerRoutes = "/api/chart-data" | "/api/connect/redirect" | "/api/connections" | "/api/copy-relationships" | "/api/copy-relationships/[id]" | "/api/copy/settings" | "/api/cron/detect-trades" | "/api/cron/monitor-positions" | "/api/cron/process-trades" | "/api/leaders/[id]" | "/api/leaders/discover" | "/api/options/chain" | "/api/orders" | "/api/orders/cancel" | "/api/orders/replace" | "/api/portfolio" | "/api/portfolio/stats" | "/api/positions" | "/api/quotes" | "/api/search-symbols" | "/api/snaptrade/accounts" | "/api/snaptrade/connect" | "/api/snaptrade/register" | "/api/symbols/search" | "/api/trades/[id]/analytics" | "/api/trades/detect" | "/api/trades/execute" | "/api/trades/history" | "/api/trades/impact" | "/api/trades/process" | "/api/user/check-onboarding" | "/api/user/role" | "/api/watchlist" | "/api/watchlist/[symbol]" | "/api/webhooks/clerk" | "/api/webhooks/snaptrade"
type PageRoutes = never
type LayoutRoutes = "/dashboard" | "/leader" | "/onboarding"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/api/chart-data": {}
  "/api/connect/redirect": {}
  "/api/connections": {}
  "/api/copy-relationships": {}
  "/api/copy-relationships/[id]": { "id": string; }
  "/api/copy/settings": {}
  "/api/cron/detect-trades": {}
  "/api/cron/monitor-positions": {}
  "/api/cron/process-trades": {}
  "/api/leaders/[id]": { "id": string; }
  "/api/leaders/discover": {}
  "/api/options/chain": {}
  "/api/orders": {}
  "/api/orders/cancel": {}
  "/api/orders/replace": {}
  "/api/portfolio": {}
  "/api/portfolio/stats": {}
  "/api/positions": {}
  "/api/quotes": {}
  "/api/search-symbols": {}
  "/api/snaptrade/accounts": {}
  "/api/snaptrade/connect": {}
  "/api/snaptrade/register": {}
  "/api/symbols/search": {}
  "/api/trades/[id]/analytics": { "id": string; }
  "/api/trades/detect": {}
  "/api/trades/execute": {}
  "/api/trades/history": {}
  "/api/trades/impact": {}
  "/api/trades/process": {}
  "/api/user/check-onboarding": {}
  "/api/user/role": {}
  "/api/watchlist": {}
  "/api/watchlist/[symbol]": { "symbol": string; }
  "/api/webhooks/clerk": {}
  "/api/webhooks/snaptrade": {}
  "/branding": {}
  "/dashboard": {}
  "/dashboard/analytics": {}
  "/dashboard/portfolio": {}
  "/dashboard/settings": {}
  "/dashboard/trades": {}
  "/faq": {}
  "/features": {}
  "/follower/orders": {}
  "/leader": {}
  "/leader/orders": {}
  "/leaders": {}
  "/leaders/[id]": { "id": string; }
  "/onboarding": {}
  "/sign-in/[[...sign-in]]": { "sign-in"?: string[]; }
  "/sign-up/[[...sign-up]]": { "sign-up"?: string[]; }
  "/testimonials": {}
  "/trades/[id]/analytics": { "id": string; }
  "/watchlist": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/dashboard": never
  "/leader": never
  "/onboarding": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
